- Required Resources
  - fixed?
- Product Selection (Prompt Generation)
  - Idea: Hierachechal Filtering
  - 加速检索:考虑使用ANN（近似最近邻）搜索库，如FAISS或Annoy，来快速检索最接近的产品向量。
  - 实时反馈与优化:如果可能，集成用户反馈来优化搜索结果。例如，如果用户对某个查询的搜索结果不满意，使用这些反馈数据训练和优化您的模型。
- Product Comments
- Better Search



Certainly! For an adaptive Hierarchical Filtering system using ChatGPT, you'd want the system to first provide broad filtering criteria and then gradually narrow down based on subsequent inputs or selections. Here are a series of prompts that support this approach:

1. **Top-Level Category Selection**:
```python
    TOP_LEVEL_PROMPT = compose_prompt(
        "Generate a list of broad product categories based on the given resources and user context to start the hierarchical filtering process.",
        """
        Consider the goal, user input, user preference, and overall context to outline the most relevant top-level product categories.
        """,
        "the goal, instruction, user preference, context, the user's input."
    )
```

2. **Sub-Category Selection**:
```python
    SUB_CATEGORY_PROMPT = compose_prompt(
        "Based on the selected top-level category '{selected_category}', provide a list of relevant sub-categories.",
        """
        Dive deeper into the main category to extract more specific sub-categories. Keep the user's preferences and context in mind to ensure relevance.
        """,
        "the goal, instruction, user preference, context, the user's input, selected top-level category."
    )
```

3. **Feature Filtering Within Sub-Category**:
```python
    FEATURE_FILTER_PROMPT = compose_prompt(
        "For the sub-category '{selected_sub_category}', list out the critical features or specifications that can be used for further product refinement.",
        """
        These features will help filter products within the chosen sub-category based on finer details and user requirements.
        """,
        "the goal, instruction, user preference, context, the user's input, selected sub-category."
    )
```

4. **Final Product Recommendation**:
```python
    FINAL_PRODUCT_PROMPT = compose_prompt(
        "Considering the user's choices and the features from '{selected_sub_category}', recommend products that align most closely with the user's needs.",
        """
        Analyze the user's journey through the hierarchical filter, along with their preferences, to suggest products that are most apt for their requirements.
        """,
        "the goal, instruction, user preference, context, the user's input, selected sub-category, and identified features."
    )
```

In practice, after each prompt's response, you'd use the output to guide the next level of filtering, taking user selections or additional inputs into account. The adaptive nature would come from the model adjusting its subsequent prompts based on prior selections and user feedback.
